// pyabispack_Libabigailtype.cpp
// This file is generated by Shroud 0.12.2. Do not edit.
#include "pyabispackmodule.hpp"

// splicer begin namespace.abispack.class.Libabigail.impl.include
// splicer end namespace.abispack.class.Libabigail.impl.include

#ifdef __cplusplus
#define SHROUD_UNUSED(param)
#else
#define SHROUD_UNUSED(param) param
#endif

#if PY_MAJOR_VERSION >= 3
#define PyInt_AsLong PyLong_AsLong
#define PyInt_FromLong PyLong_FromLong
#define PyInt_FromSize_t PyLong_FromSize_t
#define PyString_FromString PyUnicode_FromString
#define PyString_FromStringAndSize PyUnicode_FromStringAndSize
#endif
// splicer begin namespace.abispack.class.Libabigail.impl.C_definition
// splicer end namespace.abispack.class.Libabigail.impl.C_definition
// splicer begin namespace.abispack.class.Libabigail.impl.additional_methods
// splicer end namespace.abispack.class.Libabigail.impl.additional_methods
static void
PY_Libabigail_tp_del (PY_Libabigail *self)
{
// splicer begin namespace.abispack.class.Libabigail.type.del
    PY_SHROUD_release_memory(self->idtor, self->obj);
    self->obj = nullptr;
// splicer end namespace.abispack.class.Libabigail.type.del
}

// ----------------------------------------
// Function:  int GetVersion
// Attrs:     +intent(result)
// Requested: py_native_scalar_result
// Match:     py_default
static char PY_GetVersion__doc__[] =
"documentation"
;

static PyObject *
PY_GetVersion(
  PY_Libabigail *self,
  PyObject *SHROUD_UNUSED(args),
  PyObject *SHROUD_UNUSED(kwds))
{
// splicer begin namespace.abispack.class.Libabigail.method.get_version
    PyObject * SHTPy_rv = nullptr;

    int SHCXX_rv = self->obj->GetVersion();

    // post_call
    SHTPy_rv = PyInt_FromLong(SHCXX_rv);

    return (PyObject *) SHTPy_rv;
// splicer end namespace.abispack.class.Libabigail.method.get_version
}

// ----------------------------------------
// Function:  std::string ReadElfCorpusAndWriteXML
// Attrs:     +intent(result)
// Exact:     py_string_scalar_result
// ----------------------------------------
// Argument:  std::string in_file_path +value
// Attrs:     +intent(in)
// Exact:     py_string_scalar_in
// ----------------------------------------
// Argument:  std::string out_file_path +value
// Attrs:     +intent(in)
// Exact:     py_string_scalar_in
// ----------------------------------------
// Argument:  bool load_all_types=true +value
// Attrs:     +intent(in)
// Requested: py_bool_scalar_in
// Match:     py_bool_in
// ----------------------------------------
// Argument:  bool linux_kernel_mode=false +value
// Attrs:     +intent(in)
// Requested: py_bool_scalar_in
// Match:     py_bool_in
static char PY_ReadElfCorpusAndWriteXML_2__doc__[] =
"documentation"
;

static PyObject *
PY_ReadElfCorpusAndWriteXML_2(
  PY_Libabigail *self,
  PyObject *args,
  PyObject *kwds)
{
// splicer begin namespace.abispack.class.Libabigail.method.read_elf_corpus_and_write_xml
    Py_ssize_t SH_nargs = 0;
    char * in_file_path;
    char * out_file_path;
    bool load_all_types;
    PyObject * SHPy_load_all_types;
    bool linux_kernel_mode;
    PyObject * SHPy_linux_kernel_mode;
    const char *SHT_kwlist[] = {
        "in_file_path",
        "out_file_path",
        "load_all_types",
        "linux_kernel_mode",
        nullptr };
    std::string SHCXX_rv;
    PyObject * SHTPy_rv = nullptr;

    if (args != nullptr) SH_nargs += PyTuple_Size(args);
    if (kwds != nullptr) SH_nargs += PyDict_Size(args);
    if (!PyArg_ParseTupleAndKeywords(args, kwds,
        "ss|O!O!:ReadElfCorpusAndWriteXML",
        const_cast<char **>(SHT_kwlist), &in_file_path, &out_file_path,
        &PyBool_Type, &SHPy_load_all_types, &PyBool_Type,
        &SHPy_linux_kernel_mode))
        return nullptr;
    switch (SH_nargs) {
    case 2:
        {
            // post_declare
            std::string SH_in_file_path(in_file_path);
            std::string SH_out_file_path(out_file_path);

            SHCXX_rv =
                self->obj->ReadElfCorpusAndWriteXML(SH_in_file_path,
                SH_out_file_path);
            break;
        }
    case 3:
        {
            // post_declare
            std::string SH_in_file_path(in_file_path);
            std::string SH_out_file_path(out_file_path);

            // pre_call
            load_all_types = PyObject_IsTrue(SHPy_load_all_types);

            SHCXX_rv =
                self->obj->ReadElfCorpusAndWriteXML(SH_in_file_path,
                SH_out_file_path, load_all_types);
            break;
        }
    case 4:
        {
            // post_declare
            std::string SH_in_file_path(in_file_path);
            std::string SH_out_file_path(out_file_path);

            // pre_call
            load_all_types = PyObject_IsTrue(SHPy_load_all_types);
            linux_kernel_mode = PyObject_IsTrue(SHPy_linux_kernel_mode);

            SHCXX_rv =
                self->obj->ReadElfCorpusAndWriteXML(SH_in_file_path,
                SH_out_file_path, load_all_types, linux_kernel_mode);
            break;
        }
    default:
        PyErr_SetString(PyExc_ValueError, "Wrong number of arguments");
        return nullptr;
    }

    // post_call
    SHTPy_rv = PyString_FromStringAndSize(SHCXX_rv.data(),
        SHCXX_rv.size());

    return (PyObject *) SHTPy_rv;
// splicer end namespace.abispack.class.Libabigail.method.read_elf_corpus_and_write_xml
}
// splicer begin namespace.abispack.class.Libabigail.impl.after_methods
// splicer end namespace.abispack.class.Libabigail.impl.after_methods
static PyMethodDef PY_Libabigail_methods[] = {
    {"GetVersion", (PyCFunction)PY_GetVersion, METH_NOARGS,
        PY_GetVersion__doc__},
    {"ReadElfCorpusAndWriteXML",
        (PyCFunction)PY_ReadElfCorpusAndWriteXML_2,
        METH_VARARGS|METH_KEYWORDS,
        PY_ReadElfCorpusAndWriteXML_2__doc__},
    // splicer begin namespace.abispack.class.Libabigail.PyMethodDef
    // splicer end namespace.abispack.class.Libabigail.PyMethodDef
    {nullptr,   (PyCFunction)nullptr, 0, nullptr}            /* sentinel */
};

static char Libabigail__doc__[] =
"virtual class"
;

/* static */
PyTypeObject PY_Libabigail_Type = {
    PyVarObject_HEAD_INIT(nullptr, 0)
    "abispack.abispack.Libabigail",                       /* tp_name */
    sizeof(PY_Libabigail),         /* tp_basicsize */
    0,                              /* tp_itemsize */
    /* Methods to implement standard operations */
    (destructor)nullptr,                 /* tp_dealloc */
    (printfunc)nullptr,                   /* tp_print */
    (getattrfunc)nullptr,                 /* tp_getattr */
    (setattrfunc)nullptr,                 /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    nullptr,                               /* tp_reserved */
#else
    (cmpfunc)nullptr,                     /* tp_compare */
#endif
    (reprfunc)nullptr,                    /* tp_repr */
    /* Method suites for standard classes */
    nullptr,                              /* tp_as_number */
    nullptr,                              /* tp_as_sequence */
    nullptr,                              /* tp_as_mapping */
    /* More standard operations (here for binary compatibility) */
    (hashfunc)nullptr,                    /* tp_hash */
    (ternaryfunc)nullptr,                 /* tp_call */
    (reprfunc)nullptr,                    /* tp_str */
    (getattrofunc)nullptr,                /* tp_getattro */
    (setattrofunc)nullptr,                /* tp_setattro */
    /* Functions to access object as input/output buffer */
    nullptr,                              /* tp_as_buffer */
    /* Flags to define presence of optional/expanded features */
    Py_TPFLAGS_DEFAULT,             /* tp_flags */
    Libabigail__doc__,         /* tp_doc */
    /* Assigned meaning in release 2.0 */
    /* call function for all accessible objects */
    (traverseproc)nullptr,                /* tp_traverse */
    /* delete references to contained objects */
    (inquiry)nullptr,                     /* tp_clear */
    /* Assigned meaning in release 2.1 */
    /* rich comparisons */
    (richcmpfunc)nullptr,                 /* tp_richcompare */
    /* weak reference enabler */
    0,                              /* tp_weaklistoffset */
    /* Added in release 2.2 */
    /* Iterators */
    (getiterfunc)nullptr,                 /* tp_iter */
    (iternextfunc)nullptr,                /* tp_iternext */
    /* Attribute descriptor and subclassing stuff */
    PY_Libabigail_methods,                             /* tp_methods */
    nullptr,                              /* tp_members */
    nullptr,                             /* tp_getset */
    nullptr,                              /* tp_base */
    nullptr,                              /* tp_dict */
    (descrgetfunc)nullptr,                /* tp_descr_get */
    (descrsetfunc)nullptr,                /* tp_descr_set */
    0,                              /* tp_dictoffset */
    (initproc)0,                   /* tp_init */
    (allocfunc)nullptr,                  /* tp_alloc */
    (newfunc)nullptr,                    /* tp_new */
    (freefunc)nullptr,                   /* tp_free */
    (inquiry)nullptr,                     /* tp_is_gc */
    nullptr,                              /* tp_bases */
    nullptr,                              /* tp_mro */
    nullptr,                              /* tp_cache */
    nullptr,                              /* tp_subclasses */
    nullptr,                              /* tp_weaklist */
    (destructor)PY_Libabigail_tp_del,                 /* tp_del */
    0,                              /* tp_version_tag */
#if PY_MAJOR_VERSION >= 3
    (destructor)nullptr,                  /* tp_finalize */
#endif
};
