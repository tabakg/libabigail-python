// pyabispack_abispackmodule.cpp
// This file is generated by Shroud 0.12.2. Do not edit.
#include "pyabispackmodule.hpp"

// splicer begin namespace.abispack.include
// splicer end namespace.abispack.include

#ifdef __cplusplus
#define SHROUD_UNUSED(param)
#else
#define SHROUD_UNUSED(param) param
#endif

#if PY_MAJOR_VERSION >= 3
#define PyInt_AsLong PyLong_AsLong
#define PyInt_FromLong PyLong_FromLong
#define PyInt_FromSize_t PyLong_FromSize_t
#define PyString_FromString PyUnicode_FromString
#define PyString_FromStringAndSize PyUnicode_FromStringAndSize
#endif

// splicer begin namespace.abispack.C_definition
// splicer end namespace.abispack.C_definition
// splicer begin namespace.abispack.additional_functions
// splicer end namespace.abispack.additional_functions

// ----------------------------------------
// Function:  void LoadParser
// Exact:     py_default
// ----------------------------------------
// Argument:  abispack::Libabigail & parser
// Attrs:     +intent(inout)
// Requested: py_shadow_&_inout
// Match:     py_default
// ----------------------------------------
// Argument:  std::string path +value
// Attrs:     +intent(in)
// Exact:     py_string_scalar_in
static char PY_LoadParser__doc__[] =
"documentation"
;

static PyObject *
PY_LoadParser(
  PyObject *SHROUD_UNUSED(self),
  PyObject *args,
  PyObject *kwds)
{
// splicer begin namespace.abispack.function.load_parser
    ABI_abispack_Libabigail * parser;
    PY_Libabigail * SHPy_parser;
    char * path;
    const char *SHT_kwlist[] = {
        "parser",
        "path",
        nullptr };
    PY_Libabigail * SHPy_parser = nullptr;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O!s:LoadParser",
        const_cast<char **>(SHT_kwlist), &PY_Libabigail_Type,
        &SHPy_parser, &path))
        return nullptr;

    // post_declare
    abispack::Libabigail & SH_parser =
        static_cast<abispack::Libabigail *>(parser->addr);
    std::string SH_path(path);

    abispack::LoadParser(SH_parser, SH_path);

    // post_call
    SHPy_parser = Py_BuildValue("O", SH_parser);

    return (PyObject *) SHPy_parser;
// splicer end namespace.abispack.function.load_parser
}
static PyMethodDef PY_methods[] = {
{"LoadParser", (PyCFunction)PY_LoadParser, METH_VARARGS|METH_KEYWORDS,
    PY_LoadParser__doc__},
{nullptr,   (PyCFunction)nullptr, 0, nullptr}            /* sentinel */
};

#if PY_MAJOR_VERSION >= 3
static char PY__doc__[] =
"XXX submodule doc"  //"library documentation"
;

struct module_state {
    PyObject *error;
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    "abispack.abispack", /* m_name */
    PY__doc__, /* m_doc */
    sizeof(struct module_state), /* m_size */
    PY_methods, /* m_methods */
    nullptr, /* m_reload */
//    abispack_traverse, /* m_traverse */
//    abispack_clear, /* m_clear */
    nullptr, /* m_traverse */
    nullptr, /* m_clear */
    nullptr  /* m_free */
};
#endif
#define RETVAL nullptr

PyObject *PY_init_abispack_abispack(void)
{
    PyObject *m;
#if PY_MAJOR_VERSION >= 3
    m = PyModule_Create(&moduledef);
#else
    m = Py_InitModule3((char *) "abispack", PY_methods, nullptr);
#endif
    if (m == nullptr)
        return nullptr;


    // Libabigail
    PY_Libabigail_Type.tp_new   = PyType_GenericNew;
    PY_Libabigail_Type.tp_alloc = PyType_GenericAlloc;
    if (PyType_Ready(&PY_Libabigail_Type) < 0)
        return RETVAL;
    Py_INCREF(&PY_Libabigail_Type);
    PyModule_AddObject(m, "Libabigail", (PyObject *)&PY_Libabigail_Type);

    return m;
}

